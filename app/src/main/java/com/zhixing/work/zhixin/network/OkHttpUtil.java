package com.zhixing.work.zhixin.network;import com.zhixing.work.zhixin.common.Logger;import com.zhixing.work.zhixin.http.HttpHeadUtils;import com.zhixing.work.zhixin.util.SettingUtils;import java.io.File;import java.io.IOException;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import okhttp3.Cache;import okhttp3.Cookie;import okhttp3.CookieJar;import okhttp3.HttpUrl;import okhttp3.Interceptor;import okhttp3.MediaType;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;import okhttp3.ResponseBody;import okio.Buffer;import okio.BufferedSource;/** * Created by lhj on 18/5/8 */public class OkHttpUtil {    private static final String TAG = "okHttpUtil";    private static long mConnectTimeout;    private static long mReadTimeout;    private static long mWriteTimeout;    private static String mCacheDirectory;    private static long mCacheSize;    private boolean mLog;    private Map<String, String> mCommonHeader = new HashMap<>();    private OkHttpClient mClient;    private static OkHttpUtil mInstance;    private OkHttpClient.Builder mBuilder;    public static final OkHttpUtil getInstance() {        return mInstance;    }    public static void init(String cacheDirectory, long cacheSize, long connectTimeout,                            long readTimeout, long writeTimeout) {        mConnectTimeout = connectTimeout;        mReadTimeout = readTimeout;        mWriteTimeout = writeTimeout;        mCacheDirectory = cacheDirectory;        mCacheSize = cacheSize;        mInstance = new OkHttpUtil();    }    //是否打开日志    public void setLog(boolean log) {        mLog = log;    }    private OkHttpUtil() {        mBuilder = new OkHttpClient.Builder();        if (mCacheDirectory != null && mCacheSize > 0) {            mBuilder.cache(new Cache(new File(mCacheDirectory), mCacheSize));        }        mBuilder.connectTimeout(mConnectTimeout, TimeUnit.MILLISECONDS)                .readTimeout(mReadTimeout, TimeUnit.MILLISECONDS)                .writeTimeout(mWriteTimeout, TimeUnit.MILLISECONDS);        mBuilder.addInterceptor(new Interceptor() {            @Override            public Response intercept(Chain chain) throws IOException {                // return null;                Request request = chain.request();                Request.Builder builder = request.newBuilder();                String time = HttpHeadUtils.getTime();                String random = HttpHeadUtils.getRandom();                builder.header(HttpHeadUtils.KEY_TOKEN, SettingUtils.getToken());                builder.header(HttpHeadUtils.KEY_ACCESSID, HttpHeadUtils.ACCESS_ID);                builder.header(HttpHeadUtils.KEY_TIMESTAMP, time);                builder.header(HttpHeadUtils.KEY_NONCE, random);                builder.header(HttpHeadUtils.KEY_SIGNATURE, HttpHeadUtils.getSignature(time, random));                if (mCommonHeader.size() > 0) {                    //在所有请求中添加通用头部                    for (String header : mCommonHeader.keySet()) {                        builder.header(header, mCommonHeader.get(header));                    }                }                request = builder.build();                if (mLog) {                    Logger.i(TAG, "request---->" + requestToString(request));                }                long startTime = System.nanoTime();                Response response = chain.proceed(request);                long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);                if (mLog) {                    Logger.i(TAG, "<---"                            + " (" + tookMs + "ms) " +                            "[" + (response.networkResponse() == null ? "cache" : "network") + "]"                            + response.request().method() + "-RESPONSE:" + response.toString());                }                return response;            }        });        mBuilder.cookieJar(new CookieJar() {            private final HashMap<String, List<Cookie>> cookieStore = new HashMap<>();            @Override            public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {                cookieStore.put(url.host(), cookies);            }            @Override            public List<Cookie> loadForRequest(HttpUrl url) {                List<Cookie> cookies = cookieStore.get(url.host());                return cookies == null ? new ArrayList<Cookie>() : cookies;            }        });        mClient = mBuilder.build();    }    private String requestToString(Request request) {        String result = request.method() + ":" + request.url().toString();////        if (request.method().equals("GET") && !result.contains("token") && !TextUtils.isEmpty(mCommonHeader.get("token"))) {////            result += (request.url().toString().contains("?") ? "&" : "?") + "token=" + mCommonHeader.get("token");////        }////        if(request.method().equals("P")){////////        }//        RequestBody requestBody = request.body();//////        if (requestBody != null) {//            if (requestBody instanceof FormBody) {//                FormBody body = (FormBody) request.body();//                // result += " -d '";//                if (!result.contains("token") && !TextUtils.isEmpty(mCommonHeader.get("token"))) {//                    result += "?token=" + mCommonHeader.get("token") + "&";//                }//                for (int i = 0; i < body.size(); i++) {//                    if (result.contains("token") && body.name(i).equals("token")) {//                        continue;//                    }//                    result += body.name(i) + "=" + body.value(i) + "&";//                }//                result = result.substring(0, result.length() - 1);//            } else {//                result += "----un form data!";//            }//        }        return result;    }    /**     * 打印相应结果     *     * @param response     * @return     */    private String responseToString(Response response) {        try {            ResponseBody responseBody = response.body();            long contentLength = responseBody.contentLength();            BufferedSource source = responseBody.source();            source.request(Long.MAX_VALUE); // Buffer the entire body.            Buffer buffer = source.buffer();            Charset charset = Charset.forName("UTF-8");            MediaType contentType = responseBody.contentType();            if (contentType != null) {                charset = contentType.charset(Charset.forName("UTF-8"));            }            if (contentLength != 0) {                return buffer.clone().readString(charset);            } else {                return "response Empty";            }        } catch (Exception e) {            return "response IOException";        }    }    //设置全局头部    public void setCommentHeader(String key, String value) {        if (value != null) {            mCommonHeader.put(key, value);        } else {            removeCommonHeader(key);        }    }    public OkHttpClient getClient() {        return mClient;    }    public void removeCommonHeader(String key) {        mCommonHeader.remove(key);    }}