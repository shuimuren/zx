package com.zhixing.work.zhixin.network;import android.os.Message;import com.zhixing.work.zhixin.bean.AuthenticateBody;import com.zhixing.work.zhixin.bean.CertificationBody;import com.zhixing.work.zhixin.bean.EducationBody;import com.zhixing.work.zhixin.msgctrl.AbstractController;import com.zhixing.work.zhixin.msgctrl.MsgDef;import com.zhixing.work.zhixin.msgctrl.RxBus;import com.zhixing.work.zhixin.network.response.AuthenticateListResult;import com.zhixing.work.zhixin.network.response.EvaluateResult;import com.zhixing.work.zhixin.network.response.ExpectedJobResult;import com.zhixing.work.zhixin.network.response.PersonalCardBasicInfoResult;import com.zhixing.work.zhixin.network.response.SubmitAuthenticateResult;import com.zhixing.work.zhixin.requestbody.ExpectedJobBodyBean;import java.util.Map;import retrofit2.Call;/** * Created by lhj on 18/5/7 */public class RequestController extends AbstractController {    public RequestController() {        super();    }    private SpaService getSpaService() {        return RetrofitServiceFactory.getSpaService();    }    @Override    public boolean handleMessage(Message msg) {        switch (msg.what) {            case MsgDef.MSG_DEF_PERSONAL_AUTHENTICATES:                getPersonalAuthenticateList();                break;            case MsgDef.MSG_DEF_AUTHENTICATE_SUBMIT:                submitAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDUCATION_AUTHENTICATE_SUBMIT:                submitEducationAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_CERTIFICATION_AUTHENTICATE_SUBMIT:                submitCertificationAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_EVALUATE_INFO:                getEvaluateInfo();                break;            case MsgDef.MSG_DEF_UPDATE_EXPECTED_INFO:                doUpdateExpectedInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_PERSONAL_CARD_BASIC_INFO:                getPersonalCardBasicInfo();                break;        }        return true;    }    /**     * 获取认证列表     */    public void getPersonalAuthenticateList() {        Call<AuthenticateListResult> call = getSpaService().getAuthenticates();        call.enqueue(new TokenCheckedCallback<AuthenticateListResult>() {            @Override            protected void postResult(AuthenticateListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交个人认证     *     * @param params     */    public void submitAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitAuthenticate((AuthenticateBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交学历认证     *     * @param params     */    private void submitEducationAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitEducationAuthenticate((EducationBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交证书认证     *     * @param params     */    private void submitCertificationAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitCertificationAuthenticate((CertificationBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取资质信息     */    private void getEvaluateInfo() {        Call<EvaluateResult> call = getSpaService().evaluateResult(RequestConstant.KEY_BACK, RequestConstant.KEY_EVALUATE);        call.enqueue(new TokenCheckedCallback<EvaluateResult>() {            @Override            protected void postResult(EvaluateResult result) {                RxBus.getInstance().post(result);            }        });    }    private void doUpdateExpectedInfo(Map<String, Object> params) {        Call<ExpectedJobResult> call = getSpaService().updateExpectedJob(String.valueOf(params.get(RequestConstant.KEY_RESUME_ID)),                (ExpectedJobBodyBean[]) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<ExpectedJobResult>() {            @Override            protected void postResult(ExpectedJobResult result) {                RxBus.getInstance().post(result);            }        });    }    public void getPersonalCardBasicInfo() {        Call<PersonalCardBasicInfoResult> call = getSpaService().getCardBasicInfo(RequestConstant.KEY_BACK, RequestConstant.KEY_BASIC_INFO);        call.enqueue(new TokenCheckedCallback<PersonalCardBasicInfoResult>() {            @Override            protected void postResult(PersonalCardBasicInfoResult result) {                RxBus.getInstance().post(result);            }        });    }}