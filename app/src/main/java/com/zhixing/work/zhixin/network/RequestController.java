package com.zhixing.work.zhixin.network;import android.os.Message;import com.zhixing.work.zhixin.bean.AuthenticateBody;import com.zhixing.work.zhixin.msgctrl.AbstractController;import com.zhixing.work.zhixin.msgctrl.MsgDef;import com.zhixing.work.zhixin.msgctrl.RxBus;import com.zhixing.work.zhixin.network.response.AuthenticateListResult;import com.zhixing.work.zhixin.network.response.SubmitAuthenticateResult;import java.util.Map;import retrofit2.Call;/** * Created by lhj on 18/5/7 */public class RequestController extends AbstractController {    public RequestController() {        super();    }    private SpaService getSpaService() {        return RetrofitServiceFactory.getSpaService();    }    @Override    public boolean handleMessage(Message msg) {        switch (msg.what) {            case MsgDef.MSG_DEF_PERSONAL_AUTHENTICATES:                getPersonalAuthenticateList();                break;            case MsgDef.MSG_DEF_AUTHENTICATE_SUBMIT:                submitAuthenticate((Map<String, Object>) msg.obj);                break;        }        return true;    }    /**     * 获取认证列表     */    public void getPersonalAuthenticateList() {        Call<AuthenticateListResult> call = getSpaService().getAuthenticates();        call.enqueue(new TokenCheckedCallback<AuthenticateListResult>() {            @Override            protected void postResult(AuthenticateListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交认证     * @param params     */    public void submitAuthenticate(Map<String, Object> params){        Call<SubmitAuthenticateResult> call  = getSpaService().submitAuthenticate((AuthenticateBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }}