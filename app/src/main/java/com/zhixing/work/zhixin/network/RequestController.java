package com.zhixing.work.zhixin.network;import android.os.Message;import com.zhixing.work.zhixin.bean.AuthenticateBody;import com.zhixing.work.zhixin.bean.CertificationBody;import com.zhixing.work.zhixin.bean.EducationBody;import com.zhixing.work.zhixin.bean.JobCertificateDetailBean;import com.zhixing.work.zhixin.bean.JobEducationDetailBean;import com.zhixing.work.zhixin.bean.JobWorkDetailBean;import com.zhixing.work.zhixin.bean.StaffJobAdvanceBean;import com.zhixing.work.zhixin.bean.StaffJobBaseCardBean;import com.zhixing.work.zhixin.bean.UpDateInfoBody;import com.zhixing.work.zhixin.msgctrl.AbstractController;import com.zhixing.work.zhixin.msgctrl.MsgDef;import com.zhixing.work.zhixin.msgctrl.RxBus;import com.zhixing.work.zhixin.network.response.AddCompanyHistoryEventResult;import com.zhixing.work.zhixin.network.response.AddDepartmentResult;import com.zhixing.work.zhixin.network.response.AllDepartmentMemberResult;import com.zhixing.work.zhixin.network.response.AttendanceRecordMonthResult;import com.zhixing.work.zhixin.network.response.AttendanceResult;import com.zhixing.work.zhixin.network.response.AttendanceRuleResult;import com.zhixing.work.zhixin.network.response.AuditMemberResult;import com.zhixing.work.zhixin.network.response.AuthenticateListResult;import com.zhixing.work.zhixin.network.response.CertificateWorkListResult;import com.zhixing.work.zhixin.network.response.CheckStaffRuleResult;import com.zhixing.work.zhixin.network.response.ChildDepartmentResult;import com.zhixing.work.zhixin.network.response.CompanyCardInfoResult;import com.zhixing.work.zhixin.network.response.CompanyCertificationStatusResult;import com.zhixing.work.zhixin.network.response.CreateAttendanceRuleResult;import com.zhixing.work.zhixin.network.response.DeleteAttendanceRuleResult;import com.zhixing.work.zhixin.network.response.DeleteDepartmentResult;import com.zhixing.work.zhixin.network.response.DepartmentInviteResult;import com.zhixing.work.zhixin.network.response.DepartmentListResult;import com.zhixing.work.zhixin.network.response.DepartmentMemberInfoResult;import com.zhixing.work.zhixin.network.response.DepartmentSettingInfoResult;import com.zhixing.work.zhixin.network.response.EditAttendanceMemberResult;import com.zhixing.work.zhixin.network.response.EditBasicInfoResult;import com.zhixing.work.zhixin.network.response.EditCompanyHistoryEventResult;import com.zhixing.work.zhixin.network.response.EditJobAdvancedResult;import com.zhixing.work.zhixin.network.response.EditJobBasicResult;import com.zhixing.work.zhixin.network.response.EditSeniorInfoResult;import com.zhixing.work.zhixin.network.response.EvaluateResult;import com.zhixing.work.zhixin.network.response.ExpectedJobResult;import com.zhixing.work.zhixin.network.response.HandlerAuditResult;import com.zhixing.work.zhixin.network.response.JobCardBasicInfoResult;import com.zhixing.work.zhixin.network.response.JobCardSeniorInfoResult;import com.zhixing.work.zhixin.network.response.JobCertificateDetailResult;import com.zhixing.work.zhixin.network.response.JobEducationDetailResult;import com.zhixing.work.zhixin.network.response.JobEducationListResult;import com.zhixing.work.zhixin.network.response.JobWorkDetailResult;import com.zhixing.work.zhixin.network.response.JobWorkListResult;import com.zhixing.work.zhixin.network.response.JoinDepartmentDetailResult;import com.zhixing.work.zhixin.network.response.JudgeTelephoneUsableResult;import com.zhixing.work.zhixin.network.response.LeaveMemberResult;import com.zhixing.work.zhixin.network.response.LeaveStaffListResult;import com.zhixing.work.zhixin.network.response.LoginResult;import com.zhixing.work.zhixin.network.response.NewJoinMemberResult;import com.zhixing.work.zhixin.network.response.PersonalCardBasicInfoResult;import com.zhixing.work.zhixin.network.response.PersonalCardInfoResult;import com.zhixing.work.zhixin.network.response.PersonalJobCardInfoResult;import com.zhixing.work.zhixin.network.response.RegisterResult;import com.zhixing.work.zhixin.network.response.SmsCodeResult;import com.zhixing.work.zhixin.network.response.StaffAttendanceRecordResult;import com.zhixing.work.zhixin.network.response.StaffJobAdvancedResult;import com.zhixing.work.zhixin.network.response.StaffJobBaseCardResult;import com.zhixing.work.zhixin.network.response.StatisticsDailyDetailResult;import com.zhixing.work.zhixin.network.response.StatisticsDailyResult;import com.zhixing.work.zhixin.network.response.StatisticsMonthDetailResult;import com.zhixing.work.zhixin.network.response.StatisticsMonthResult;import com.zhixing.work.zhixin.network.response.SubmitAuthenticateResult;import com.zhixing.work.zhixin.network.response.UpdateChildDepartmentResult;import com.zhixing.work.zhixin.network.response.UpdateDepartmentResult;import com.zhixing.work.zhixin.network.response.UpdateJobResult;import com.zhixing.work.zhixin.network.response.UpdatePasswordResult;import com.zhixing.work.zhixin.network.response.UploadCompanyAvatarResult;import com.zhixing.work.zhixin.network.response.UploadPersonalAvatarResult;import com.zhixing.work.zhixin.network.response.WifiListResult;import com.zhixing.work.zhixin.requestbody.AttendanceRuleBody;import com.zhixing.work.zhixin.requestbody.AvatarBody;import com.zhixing.work.zhixin.requestbody.CompanyAvatarBody;import com.zhixing.work.zhixin.requestbody.DepartmentBody;import com.zhixing.work.zhixin.requestbody.EditCompanyHistoryEventBody;import com.zhixing.work.zhixin.requestbody.ExpectedJobBodyBean;import com.zhixing.work.zhixin.requestbody.StaffJobBasicBody;import com.zhixing.work.zhixin.requestbody.StaffJobSeniorBody;import java.util.Map;import retrofit2.Call;/** * Created by lhj on 18/5/7 */public class RequestController extends AbstractController {    public RequestController() {        super();    }    private SpaService getSpaService() {        return RetrofitServiceFactory.getSpaService();    }    @Override    public boolean handleMessage(Message msg) {        switch (msg.what) {            case MsgDef.MSG_DEF_PERSONAL_AUTHENTICATES:                getPersonalAuthenticateList();                break;            case MsgDef.MSG_DEF_AUTHENTICATE_SUBMIT:                submitAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDUCATION_AUTHENTICATE_SUBMIT:                submitEducationAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_CERTIFICATION_AUTHENTICATE_SUBMIT:                submitCertificationAuthenticate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_EVALUATE_INFO:                getEvaluateInfo();                break;            case MsgDef.MSG_DEF_UPDATE_EXPECTED_INFO:                doUpdateExpectedInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_PERSONAL_CARD_BASIC_INFO:                getPersonalCardBasicInfo();                break;            case MsgDef.MSG_DEF_LOGIN:                userLogin((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_VERIFICATION_CODE:                getVerificationCode((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_UPDATE_PASSWORD:                updatePassword((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_REGISTER:                userRegister((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_TELEPHONE_USABLE:                judgeTelephoneUsable((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_COMPANY_CERTIFICATION_STATUS:                getCompanyCertificationStatus();                break;            case MsgDef.MSG_DEF_GET_ALL_DEPARTMENT_MEMBER:                getAllDepartmentMember();                break;            case MsgDef.MSG_DEF_DELETE_DEPARTMENT:                deleteDepartment(msg.obj.toString());                break;            case MsgDef.MSG_DEF_DEPARTMENT_INVITE:                departmentInvite(msg.obj.toString());                break;            case MsgDef.MSG_DEF_UPDATE_DEPARTMENT:                updateDepartment(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_ALL_DEPARTMENT:                getAllDepartment();                break;            case MsgDef.MSG_DEF_GET_CHILD_DEPARTMENT:                getChildDepartment(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_CHILD_DEPARTMENT_MEMBER:                getDepartmentMemberInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_ADD_DEPARTMENT:                addDepartment((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_UPDATE_CHILD_DEPARTMENT:                updateChildDepartment((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_DEPARTMENT_SETTING_INFO:                getDepartmentSettingInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_COMPANY_CARD_INFO:                getCompanyCardInfo();                break;            case MsgDef.MSG_DEF_GET_PERSONAL_CARD_INFO:                getPersonalCardInfo();                break;            case MsgDef.MSG_DEF_UPLOAD_AVATAR:                uploadAvatar((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_COMPANY_UPLOAD_AVATAR:                uploadCompanyAvatar((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_ADD_COMPANY_EVENT:                addCompanyEvent((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_COMPANY_ENENT:                editCompanyEvent((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_USER_ATTENDANCE_RECORD:                staffAttendanceRecord((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_USER_ATTENDANCE_WIFI_LIST:                getWifiList();                break;            case MsgDef.MSG_DEF_STAFF_ATTENDANCE:                attendanceRecord((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_ATTENDANCE_RECORD_STATISTICS_DAILY:                statisticsDaily(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_ATTENDANCE_STATISTICS_DAILY_DETAIL:                statisticsDailyDetail((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_ATTENDANCE_RECORD_STATISTICS_MONTH:                statisticsMonth(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_ATTENDANCE_STATISTICS_MONTH_DETAIL:                statisticsMonthDetail((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_STAFF_ATTENDANCE_RECORD_MONTH:                attendanceRecordMonth((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_CREATE_ATTENDANCE_RULE:                createAttendanceRule((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_ATTENDANCE_RULE:                editAttendanceRule((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_CHECK_STAFF_ATTENDANCE_RULE:                checkStaffRule((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_ATTENDANCE_RULE:                getAttendanceRule();                break;            case MsgDef.MSG_DEF_DELETE_ATTENDANCE_RULE:                deleteAttendanceRule(msg.obj.toString());                break;            case MsgDef.MSG_DEF_EDIT_ATTENDANCE_MEMBER:                editAttendanceMember((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_JOIN_DEPARTMENT_APPLY:                joinDepartmentTotal();                break;            case MsgDef.MSG_DEF_GET_AUDIT_JOIN_DEPARTMENT_LIST:                getAuditJoinDepartmentList(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_AUDIT_JOIN_DEPARTMENT_DETAIL:                getAuditJoinDepartmentDetail(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_HANDLER_JOIN_DEPARTMENT:                handlerJoinDepartment((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_CARD:                getPersonalJobCardInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_JOB_BASE:                getPersonalJobCardBasicInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_JOB_ADVANCED:                getPersonalJobCardSeniorInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_EDIT_COMPANY_STAFF_JOB_BASE:                editStaffBasicInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EIDT_COMPANY_STAFF_JOB_ADVANCED:                editStaffSeniorInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_PERSON_BASE:                getStaffBaseJobCardInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_PERSON_ADVANCED:                getStaffAdvancedJobCardInfo(msg.obj.toString());                break;            case MsgDef.MSG_DEF_EDIT_COMPANYSTAFF_PERSON_BASE:                editStaffJobBasicInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_COMPANY_STAFF_PERSON_ADVANCED:                editStaffJobAdvancedInfo((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_STAFF_WORK_LIST:                getStaffWorkList(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_STAFF_WORK_DETAIL:                getStaffWorkDetail((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_ADD_STAFF_WORK:                addStaffWork((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_STAFF_WORK:                editStaffWork((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_DELETE_STAFF_WORK:                deleteStaffWork((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_STAFF_EDUCATION_LIST:                getStaffEducationList(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_STAFF_EDUCATION_DETAIL:                getStaffEducationDetail((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_ADD_STAFF_EDUCATION:                addStaffEducation((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_STAFF_EDUCATION:                editStaffEducation((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_DELETE_STAFF_EDUCATION:                deleteStaffEducation((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_STAFF_CERTIFICATE_LIST:                getStaffCertificateList(msg.obj.toString());                break;            case MsgDef.MSG_DEF_GET_STAFF_CERTIFICATE_DETAIL:                getStaffCertificateDetail((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_ADD_STAFF_CERTIFICATE:                addStaffCertificate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_EDIT_STAFF_CERTIFICATE:                editStaffCertificate((Map<String, Object>) msg.obj);                break;            case MsgDef.MSG_DEF_DELETE_STAFF_CERTIFICATE:                deleteStaffCertificate((Map<String, String>) msg.obj);                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_DIMISSION_COUNT:                getStaffLeaveCount();                break;            case MsgDef.MSG_DEF_GET_COMPANY_STAFF_DIMISSION_LIST:                leaveStaffList((Map<String, String>) msg.obj);                break;        }        return true;    }    /**     * 获取公司下所有部门员工     * AllDepartmentMemberResult     */    public void getAllDepartmentMember() {        Call<AllDepartmentMemberResult> call = getSpaService().getAllDepartmentMember();        call.enqueue(new TokenCheckedCallback<AllDepartmentMemberResult>() {            @Override            protected void postResult(AllDepartmentMemberResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 删除部门     *     * @param departmentId DeleteDepartmentResult     */    private void deleteDepartment(String departmentId) {        Call<DeleteDepartmentResult> call = getSpaService().deleteDepartment(departmentId);        call.enqueue(new TokenCheckedCallback<DeleteDepartmentResult>() {            @Override            protected void postResult(DeleteDepartmentResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 邀请进入该部门     *     * @param departmentId 部门Id     */    private void departmentInvite(String departmentId) {        Call<DepartmentInviteResult> call = getSpaService().departmentInvite(departmentId);        call.enqueue(new TokenCheckedCallback<DepartmentInviteResult>() {            @Override            protected void postResult(DepartmentInviteResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 更换组织架构     *     * @param companyId 要切换的公司Id     */    private void updateDepartment(String companyId) {        Call<UpdateDepartmentResult> call = getSpaService().updateDepartment(companyId);        call.enqueue(new TokenCheckedCallback<UpdateDepartmentResult>() {            @Override            protected void postResult(UpdateDepartmentResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取账号下所有组织架构列表     * DepartmentListResult     */    public void getAllDepartment() {        Call<DepartmentListResult> call = getSpaService().getDepartmentList();        call.enqueue(new TokenCheckedCallback<DepartmentListResult>() {            @Override            protected void postResult(DepartmentListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取子部门     *     * @param departmentId 部门ID     */    private void getChildDepartment(String departmentId) {        Call<ChildDepartmentResult> call = getSpaService().getChildDepartment(departmentId);        call.enqueue(new TokenCheckedCallback<ChildDepartmentResult>() {            @Override            protected void postResult(ChildDepartmentResult result) {                result.setDepartmentId(departmentId);                RxBus.getInstance().post(result);            }        });    }    /**     * DepartmentMemberInfoResult     *     * @param departmentId 组织ID     *                     获取部门下员工列表     */    private void getDepartmentMemberInfo(String departmentId) {        Call<DepartmentMemberInfoResult> call = getSpaService().getDepartmentMemberInfo(departmentId);        call.enqueue(new TokenCheckedCallback<DepartmentMemberInfoResult>() {            @Override            protected void postResult(DepartmentMemberInfoResult result) {                result.setDepartmentId(departmentId);                RxBus.getInstance().post(result);            }        });    }    /**     * 添加部门     *     * @param params AddDepartment     */    private void addDepartment(Map<String, String> params) {        Call<AddDepartmentResult> call = getSpaService().addDepartment(params.get(RequestConstant.KEY_PARENT_ID),                params.get(RequestConstant.KEY_NAME));        call.enqueue(new TokenCheckedCallback<AddDepartmentResult>() {            @Override            protected void postResult(AddDepartmentResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 修改部门     *     * @param param DepartmentBody     *              UpdateChildDepartmentResult     */    private void updateChildDepartment(Map<String, Object> param) {        Call<UpdateChildDepartmentResult> call = getSpaService().updateChildDepartment((DepartmentBody) param.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<UpdateChildDepartmentResult>() {            @Override            protected void postResult(UpdateChildDepartmentResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取设置信息     *     * @param departmentId     */    private void getDepartmentSettingInfo(String departmentId) {        Call<DepartmentSettingInfoResult> call = getSpaService().getDepartmentSettingInfo(departmentId);        call.enqueue(new TokenCheckedCallback<DepartmentSettingInfoResult>() {            @Override            protected void postResult(DepartmentSettingInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 登录     *     * @param params     */    private void userLogin(Map<String, String> params) {        Call<LoginResult> call = getSpaService().doLogin(params.get(RequestConstant.KEY_PHONE_NUMBER),                params.get(RequestConstant.KEY_PASSWORD), params.get(RequestConstant.KEY_USER_ROLE_ENUM));        call.enqueue(new TokenCheckedCallback<LoginResult>() {            @Override            protected void postResult(LoginResult result) {                RxBus.getInstance().post(result);            }            @Override            protected void postError(String errorMessage) {                super.postError(errorMessage);                LoginResult result = new LoginResult();                result.Code = NetworkConstant.SERVICE_ERROR_CODE;                result.Message = errorMessage;                RxBus.getInstance().post(result);            }        });    }    /**     * 更新密码     *     * @param params     */    private void updatePassword(Map<String, Object> params) {        Call<UpdatePasswordResult> call = getSpaService().upDateUserPassword((UpDateInfoBody) params.get(RequestConstant.KEY_UPDATE_PSAAWORD_BODY));        call.enqueue(new TokenCheckedCallback<UpdatePasswordResult>() {            @Override            protected void postResult(UpdatePasswordResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取验证码     *     * @param params     */    private void getVerificationCode(Map<String, String> params) {        Call<SmsCodeResult> call = getSpaService().getVerificationCode(params.get(RequestConstant.KEY_PHONE_NUMBER),                params.get(RequestConstant.KEY_USER_ROLE_ENUM),                params.get(RequestConstant.KEY_SMS_CODE_TYPE_ENUM));        call.enqueue(new TokenCheckedCallback<SmsCodeResult>() {            @Override            protected void postResult(SmsCodeResult result) {                RxBus.getInstance().post(result);            }            @Override            protected void postError(String errorMessage) {                SmsCodeResult result = new SmsCodeResult();                result.Code = NetworkConstant.SERVICE_ERROR_CODE;                result.Message = errorMessage;                RxBus.getInstance().post(result);            }        });    }    /**     * 注册     *     * @param params     */    private void userRegister(Map<String, String> params) {        Call<RegisterResult> call = getSpaService().userRegister(params.get(RequestConstant.KEY_PHONE_NUMBER),                params.get(RequestConstant.KEY_PASSWORD), params.get(RequestConstant.KEY_ROLE),                params.get(RequestConstant.KEY_VERIFY_CODE));        call.enqueue(new TokenCheckedCallback<RegisterResult>() {            @Override            protected void postResult(RegisterResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * @param params     */    private void judgeTelephoneUsable(Map<String, String> params) {        Call<JudgeTelephoneUsableResult> call = getSpaService().judgeTelephoneUsable(params.get(RequestConstant.KEY_PHONE_NUMBER),                params.get(RequestConstant.KEY_ROLE));        call.enqueue(new TokenCheckedCallback<JudgeTelephoneUsableResult>() {            @Override            protected void postResult(JudgeTelephoneUsableResult result) {                RxBus.getInstance().post(result);            }            @Override            protected void postError(String errorMessage) {                JudgeTelephoneUsableResult result = new JudgeTelephoneUsableResult();                result.Code = NetworkConstant.SERVICE_ERROR_CODE;                result.setContent(true);                result.Message = errorMessage;                RxBus.getInstance().post(result);            }        });    }    /**     * 获取认证列表     */    public void getPersonalAuthenticateList() {        Call<AuthenticateListResult> call = getSpaService().getAuthenticates();        call.enqueue(new TokenCheckedCallback<AuthenticateListResult>() {            @Override            protected void postResult(AuthenticateListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交个人认证     *     * @param params     */    public void submitAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitAuthenticate((AuthenticateBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交学历认证     *     * @param params     */    private void submitEducationAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitEducationAuthenticate((EducationBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 提交证书认证     *     * @param params     */    private void submitCertificationAuthenticate(Map<String, Object> params) {        Call<SubmitAuthenticateResult> call = getSpaService().submitCertificationAuthenticate((CertificationBody) params.get(RequestConstant.KEY_AUTHENTICATION_INFO));        call.enqueue(new TokenCheckedCallback<SubmitAuthenticateResult>() {            @Override            protected void postResult(SubmitAuthenticateResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取资质信息     */    private void getEvaluateInfo() {        Call<EvaluateResult> call = getSpaService().evaluateResult(RequestConstant.KEY_BACK, RequestConstant.KEY_EVALUATE);        call.enqueue(new TokenCheckedCallback<EvaluateResult>() {            @Override            protected void postResult(EvaluateResult result) {                RxBus.getInstance().post(result);            }        });    }    private void doUpdateExpectedInfo(Map<String, Object> params) {        Call<ExpectedJobResult> call = getSpaService().updateExpectedJob(String.valueOf(params.get(RequestConstant.KEY_RESUME_ID)),                (ExpectedJobBodyBean[]) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<ExpectedJobResult>() {            @Override            protected void postResult(ExpectedJobResult result) {                RxBus.getInstance().post(result);            }        });    }    public void getPersonalCardBasicInfo() {        Call<PersonalCardBasicInfoResult> call = getSpaService().getCardBasicInfo(RequestConstant.KEY_BACK, RequestConstant.KEY_BASIC_INFO);        call.enqueue(new TokenCheckedCallback<PersonalCardBasicInfoResult>() {            @Override            protected void postResult(PersonalCardBasicInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    //企业认证状态    public void getCompanyCertificationStatus() {        Call<CompanyCertificationStatusResult> call = getSpaService().getCompanyCertificationStatus();        call.enqueue(new TokenCheckedCallback<CompanyCertificationStatusResult>() {            @Override            protected void postResult(CompanyCertificationStatusResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取公司卡牌正面信息     */    public void getCompanyCardInfo() {        Call<CompanyCardInfoResult> call = getSpaService().getCompanyCardInfo();        call.enqueue(new TokenCheckedCallback<CompanyCardInfoResult>() {            @Override            protected void postResult(CompanyCardInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 个人卡牌正面信息     */    public void getPersonalCardInfo() {        Call<PersonalCardInfoResult> call = getSpaService().getPersonalCardInfo(RequestConstant.KEY_FRONT);        call.enqueue(new TokenCheckedCallback<PersonalCardInfoResult>() {            @Override            protected void postResult(PersonalCardInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 更新个人卡牌头像     */    private void uploadAvatar(Map<String, Object> params) {        Call<UploadPersonalAvatarResult> call = getSpaService().uploadPersonalAvatar((AvatarBody) params.get(RequestConstant.KEY_AVATAR));        call.enqueue(new TokenCheckedCallback<UploadPersonalAvatarResult>() {            @Override            protected void postResult(UploadPersonalAvatarResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 更新企业卡牌头像     *     * @param params     */    private void uploadCompanyAvatar(Map<String, Object> params) {        Call<UploadCompanyAvatarResult> call = getSpaService().uploadCompanyAvatar((CompanyAvatarBody) params.get(RequestConstant.KEY_AVATAR));        call.enqueue(new TokenCheckedCallback<UploadCompanyAvatarResult>() {            @Override            protected void postResult(UploadCompanyAvatarResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 添加大事件     *     * @param params     */    private void addCompanyEvent(Map<String, String> params) {        Call<AddCompanyHistoryEventResult> call = getSpaService().addCompanyHistoryEvent(params.get(RequestConstant.KEY_NAME),                params.get(RequestConstant.KEY_DATE_DATE), params.get(RequestConstant.KEY_INTRO), params.get(RequestConstant.KEY_IMAGE));        call.enqueue(new TokenCheckedCallback<AddCompanyHistoryEventResult>() {            @Override            protected void postResult(AddCompanyHistoryEventResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 修改大事件     *     * @param params     */    private void editCompanyEvent(Map<String, Object> params) {        Call<EditCompanyHistoryEventResult> call = getSpaService().editCompanyHistoryEvent((EditCompanyHistoryEventBody) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<EditCompanyHistoryEventResult>() {            @Override            protected void postResult(EditCompanyHistoryEventResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取谋用户谋时间段内的打卡记录     *     * @param params     */    private void staffAttendanceRecord(Map<String, String> params) {        Call<StaffAttendanceRecordResult> call = getSpaService().staffAttendanceRecord(params.get(RequestConstant.KEY_STAFF_ID),                params.get(RequestConstant.KEY_START_DATE), params.get(RequestConstant.KEY_END_DATE));        call.enqueue(new TokenCheckedCallback<StaffAttendanceRecordResult>() {            @Override            protected void postResult(StaffAttendanceRecordResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 考勤组wifi列表     */    public void getWifiList() {        Call<WifiListResult> call = getSpaService().getWifiList();        call.enqueue(new TokenCheckedCallback<WifiListResult>() {            @Override            protected void postResult(WifiListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 员工打卡     *     * @param params     */    private void attendanceRecord(Map<String, String> params) {        Call<AttendanceResult> call = getSpaService().staffAttendance(params.get(RequestConstant.KEY_BSS_ID),                params.get(RequestConstant.KEY_WIFI_NAME), params.get(RequestConstant.KEY_CLIENT_CODE));        call.enqueue(new TokenCheckedCallback<AttendanceResult>() {            @Override            protected void postResult(AttendanceResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 日统计     *     * @param params     */    private void statisticsDaily(String params) {        Call<StatisticsDailyResult> call = getSpaService().statisticsDaily(params);        call.enqueue(new TokenCheckedCallback<StatisticsDailyResult>() {            @Override            protected void postResult(StatisticsDailyResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 日统计 - 详细     *     * @param params     */    private void statisticsDailyDetail(Map<String, String> params) {        Call<StatisticsDailyDetailResult> call = getSpaService().statisticsDailyDetail(params.get(RequestConstant.KEY_DATE_DATE),                params.get(RequestConstant.KEY_CLOCK_STATUS), params.get(RequestConstant.KEY_PAGE_INDEX), params.get(RequestConstant.KEY_ROWS_COUNT));        call.enqueue(new TokenCheckedCallback<StatisticsDailyDetailResult>() {            @Override            protected void postResult(StatisticsDailyDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 月统计     *     * @param date     */    private void statisticsMonth(String date) {        Call<StatisticsMonthResult> call = getSpaService().statisticsMonth(date);        call.enqueue(new TokenCheckedCallback<StatisticsMonthResult>() {            @Override            protected void postResult(StatisticsMonthResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 月统计 - 详细     *     * @param params     */    private void statisticsMonthDetail(Map<String, String> params) {        Call<StatisticsMonthDetailResult> call = getSpaService().statisticsMonthDetail(params.get(RequestConstant.KEY_DATE_DATE),                params.get(RequestConstant.KEY_CLOCK_STATUS), params.get(RequestConstant.KEY_PAGE_INDEX), params.get(RequestConstant.KEY_ROWS_COUNT));        call.enqueue(new TokenCheckedCallback<StatisticsMonthDetailResult>() {            @Override            protected void postResult(StatisticsMonthDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 月统计 - 个人     *     * @param params     */    private void attendanceRecordMonth(Map<String, String> params) {        Call<AttendanceRecordMonthResult> call = getSpaService().personalRecordMonth(params.get(RequestConstant.KEY_STAFF_ID),                params.get(RequestConstant.KEY_DATE_DATE));        call.enqueue(new TokenCheckedCallback<AttendanceRecordMonthResult>() {            @Override            protected void postResult(AttendanceRecordMonthResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 新增考勤规则     *     * @param params     */    private void createAttendanceRule(Map<String, Object> params) {        Call<CreateAttendanceRuleResult> call = getSpaService().createAttendanceRule((AttendanceRuleBody) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<CreateAttendanceRuleResult>() {            @Override            protected void postResult(CreateAttendanceRuleResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 修改考勤规则     *     * @param params     */    private void editAttendanceRule(Map<String, Object> params) {        Call<CreateAttendanceRuleResult> call = getSpaService().editAttendanceRule((AttendanceRuleBody) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<CreateAttendanceRuleResult>() {            @Override            protected void postResult(CreateAttendanceRuleResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 检查考勤人员是否已经有其它规则     *     * @param params     */    private void checkStaffRule(Map<String, Object> params) {        Call<CheckStaffRuleResult> call = getSpaService().checkStaffRule(                (String) params.get(RequestConstant.KEY_ATTENDANCE_RULE_ID)                , (Integer[]) params.get(RequestConstant.KEY_STAFF_IDS));        call.enqueue(new TokenCheckedCallback<CheckStaffRuleResult>() {            @Override            protected void postResult(CheckStaffRuleResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取考勤规则     */    public void getAttendanceRule() {        Call<AttendanceRuleResult> call = getSpaService().getAttendanceRule();        call.enqueue(new TokenCheckedCallback<AttendanceRuleResult>() {            @Override            protected void postResult(AttendanceRuleResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 删除考勤规则     *     * @param id     */    private void deleteAttendanceRule(String id) {        Call<DeleteAttendanceRuleResult> call = getSpaService().deleteAttendanceRule(id);        call.enqueue(new TokenCheckedCallback<DeleteAttendanceRuleResult>() {            @Override            protected void postResult(DeleteAttendanceRuleResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 修改考勤人员     *     * @param params     */    private void editAttendanceMember(Map<String, Object> params) {        Call<EditAttendanceMemberResult> call = getSpaService().editAttendanceMember((String) params.get(RequestConstant.KEY_ID),                (Integer[]) params.get(RequestConstant.KEY_REQUEST_ARRAY));        call.enqueue(new TokenCheckedCallback<EditAttendanceMemberResult>() {            @Override            protected void postResult(EditAttendanceMemberResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取需要审核的人数     */    private void joinDepartmentTotal() {        Call<NewJoinMemberResult> call = getSpaService().getJoinDepartmentTotal();        call.enqueue(new TokenCheckedCallback<NewJoinMemberResult>() {            @Override            protected void postResult(NewJoinMemberResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取审核申请列表     */    private void getAuditJoinDepartmentList(String auditStatus) {        Call<AuditMemberResult> call = getSpaService().getJoinDepartmentList(auditStatus);        call.enqueue(new TokenCheckedCallback<AuditMemberResult>() {            @Override            protected void postResult(AuditMemberResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取审核详情     *     * @param id     */    private void getAuditJoinDepartmentDetail(String id) {        Call<JoinDepartmentDetailResult> call = getSpaService().getJoinDepartmentDetail(id);        call.enqueue(new TokenCheckedCallback<JoinDepartmentDetailResult>() {            @Override            protected void postResult(JoinDepartmentDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 处理审核     *     * @param params     */    private void handlerJoinDepartment(Map<String, Object> params) {        Call<HandlerAuditResult> call = getSpaService().handlerAudit((String) params.get(RequestConstant.KEY_ID),                (String) params.get(RequestConstant.KEY_PASSED), (String) params.get(RequestConstant.KEY_ATTENDANCE_RULE_ID));        call.enqueue(new TokenCheckedCallback<HandlerAuditResult>() {            @Override            protected void postResult(HandlerAuditResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取员工卡牌信息     *     * @param staffId     */    private void getPersonalJobCardInfo(String staffId) {        Call<PersonalJobCardInfoResult> call = getSpaService().getPersonalJobCard(staffId);        call.enqueue(new TokenCheckedCallback<PersonalJobCardInfoResult>() {            @Override            protected void postResult(PersonalJobCardInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取员工卡牌背面基础信息     *     * @param staffId     */    private void getPersonalJobCardBasicInfo(String staffId) {        Call<JobCardBasicInfoResult> call = getSpaService().getPersonalJobCardBasicInfo(staffId);        call.enqueue(new TokenCheckedCallback<JobCardBasicInfoResult>() {            @Override            protected void postResult(JobCardBasicInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取员工卡牌背面高级信息     *     * @param staffId     */    private void getPersonalJobCardSeniorInfo(String staffId) {        Call<JobCardSeniorInfoResult> call = getSpaService().getPersonalJobCardSeniorInfo(staffId);        call.enqueue(new TokenCheckedCallback<JobCardSeniorInfoResult>() {            @Override            protected void postResult(JobCardSeniorInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑个人基础信息     *     * @param obj     */    private void editStaffBasicInfo(Map<String, Object> obj) {        Call<EditBasicInfoResult> call = getSpaService().editStaffBasicInfo((StaffJobBasicBody) obj.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<EditBasicInfoResult>() {            @Override            protected void postResult(EditBasicInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑个人高级信息     *     * @param obj     */    private void editStaffSeniorInfo(Map<String, Object> obj) {        Call<EditSeniorInfoResult> call = getSpaService().editStaffSeniorInfo((StaffJobSeniorBody) obj.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<EditSeniorInfoResult>() {            @Override            protected void postResult(EditSeniorInfoResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取员工卡牌基本信息     *     * @param staffId     */    private void getStaffBaseJobCardInfo(String staffId) {        Call<StaffJobBaseCardResult> call = getSpaService().getStaffJobBaseCard(staffId);        call.enqueue(new TokenCheckedCallback<StaffJobBaseCardResult>() {            @Override            protected void postResult(StaffJobBaseCardResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取员工卡牌高级信息     *     * @param staffId     */    private void getStaffAdvancedJobCardInfo(String staffId) {        Call<StaffJobAdvancedResult> call = getSpaService().getStaffJobAdvance(staffId);        call.enqueue(new TokenCheckedCallback<StaffJobAdvancedResult>() {            @Override            protected void postResult(StaffJobAdvancedResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑员工个人基本信息     *     * @param obj     */    private void editStaffJobBasicInfo(Map<String, Object> obj) {        Call<EditJobBasicResult> call = getSpaService().editStaffJobBasicInfo((StaffJobBaseCardBean) obj.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<EditJobBasicResult>() {            @Override            protected void postResult(EditJobBasicResult result) {                RxBus.getInstance().post(result);            }        });    }    //    /**     * 编辑员工个人高级信息     *     * @param obj     */    private void editStaffJobAdvancedInfo(Map<String, Object> obj) {        Call<EditJobAdvancedResult> call = getSpaService().editStaffJobAdvancedInfo((StaffJobAdvanceBean) obj.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<EditJobAdvancedResult>() {            @Override            protected void postResult(EditJobAdvancedResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取教育列表     *     * @param staffId     */    private void getStaffEducationList(String staffId) {        Call<JobEducationListResult> call = getSpaService().staffEducationList(staffId);        call.enqueue(new TokenCheckedCallback<JobEducationListResult>() {            @Override            protected void postResult(JobEducationListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 删除教育经历     *     * @param params     */    private void deleteStaffEducation(Map<String, String> params) {        Call<UpdateJobResult> call = getSpaService().deleteStaffEducation(params.get(RequestConstant.KEY_ID),                params.get(RequestConstant.KEY_STAFF_ID));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(0);                RxBus.getInstance().post(result);            }        });    }    /**     * 添加教育经历     *     * @param params     */    private void addStaffEducation(Map<String, Object> params) {        JobEducationDetailBean detailBean = (JobEducationDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY);        Call<UpdateJobResult> call = getSpaService().addStaffEducation(detailBean.getStaffId(), String.valueOf(detailBean.getEducation()),                detailBean.getSchool(), detailBean.getStartDate(), detailBean.getEndDate(), detailBean.getMajor(), detailBean.getExperience());        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(1);                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑教育经历     *     * @param params     */    private void editStaffEducation(Map<String, Object> params) {        Call<UpdateJobResult> call = getSpaService().editStaffEducation((JobEducationDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(2);                RxBus.getInstance().post(result);            }        });    }    /**     * 教育经历详情     *     * @param params     */    private void getStaffEducationDetail(Map<String, String> params) {        Call<JobEducationDetailResult> call = getSpaService().getJobEducationDetail(params.get(RequestConstant.KEY_STAFF_ID)                , params.get(RequestConstant.KEY_ID));        call.enqueue(new TokenCheckedCallback<JobEducationDetailResult>() {            @Override            protected void postResult(JobEducationDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 获取工作列表     *     * @param staffId     */    private void getStaffWorkList(String staffId) {        Call<JobWorkListResult> call = getSpaService().staffWorkList(staffId);        call.enqueue(new TokenCheckedCallback<JobWorkListResult>() {            @Override            protected void postResult(JobWorkListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 删除工作     *     * @param params     */    private void deleteStaffWork(Map<String, String> params) {        Call<UpdateJobResult> call = getSpaService().deleteStaffWork(params.get(RequestConstant.KEY_ID),                params.get(RequestConstant.KEY_STAFF_ID));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(0);                RxBus.getInstance().post(result);            }        });    }    /**     * 工作详情     *     * @param params     */    private void getStaffWorkDetail(Map<String, String> params) {        Call<JobWorkDetailResult> call = getSpaService().getJobWorkDetail(params.get(RequestConstant.KEY_STAFF_ID)                , params.get(RequestConstant.KEY_ID));        call.enqueue(new TokenCheckedCallback<JobWorkDetailResult>() {            @Override            protected void postResult(JobWorkDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 添加工经历     *     * @param params     */    private void addStaffWork(Map<String, Object> params) {        JobWorkDetailBean detailBean = (JobWorkDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY);        Call<UpdateJobResult> call = getSpaService().addStaffWork(detailBean.getStaffId(), detailBean.getCompanyName(),                detailBean.getStartDate(), detailBean.getEndDate(), detailBean.getPostOfDuty(), detailBean.getDepartment(),                detailBean.getJobContent());        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(1);                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑工作经历     *     * @param params     */    private void editStaffWork(Map<String, Object> params) {        Call<UpdateJobResult> call = getSpaService().editStaffWork((JobWorkDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(2);                RxBus.getInstance().post(result);            }        });    }    /**     * 获取证书列表     *     * @param staffId     */    private void getStaffCertificateList(String staffId) {        Call<CertificateWorkListResult> call = getSpaService().staffCertificateList(staffId);        call.enqueue(new TokenCheckedCallback<CertificateWorkListResult>() {            @Override            protected void postResult(CertificateWorkListResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 删除证书     *     * @param params     */    private void deleteStaffCertificate(Map<String, String> params) {        Call<UpdateJobResult> call = getSpaService().deleteStaffCertificate(params.get(RequestConstant.KEY_ID),                params.get(RequestConstant.KEY_STAFF_ID));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(0);                RxBus.getInstance().post(result);            }        });    }    /**     * 证书详情     *     * @param params     */    private void getStaffCertificateDetail(Map<String, String> params) {        Call<JobCertificateDetailResult> call = getSpaService().getJobCertificateDetail(params.get(RequestConstant.KEY_STAFF_ID)                , params.get(RequestConstant.KEY_ID));        call.enqueue(new TokenCheckedCallback<JobCertificateDetailResult>() {            @Override            protected void postResult(JobCertificateDetailResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 添加证书     *     * @param params     */    private void addStaffCertificate(Map<String, Object> params) {        JobCertificateDetailBean detailBean = (JobCertificateDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY);        Call<UpdateJobResult> call = getSpaService().addStaffCertificate(detailBean.getStaffId(), detailBean.getCertificateTitle(),                detailBean.getGraduationDate(), detailBean.getGrade());        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(1);                RxBus.getInstance().post(result);            }        });    }    /**     * 编辑证书信息     *     * @param params     */    private void editStaffCertificate(Map<String, Object> params) {        Call<UpdateJobResult> call = getSpaService().editStaffCertificate((JobCertificateDetailBean) params.get(RequestConstant.KEY_REQUEST_BODY));        call.enqueue(new TokenCheckedCallback<UpdateJobResult>() {            @Override            protected void postResult(UpdateJobResult result) {                result.setType(2);                RxBus.getInstance().post(result);            }        });    }    /**     * 已离职员工总数     */    public void getStaffLeaveCount() {        Call<LeaveMemberResult> call = getSpaService().leaveMemberCount();        call.enqueue(new TokenCheckedCallback<LeaveMemberResult>() {            @Override            protected void postResult(LeaveMemberResult result) {                RxBus.getInstance().post(result);            }        });    }    /**     * 离职员工列表     * @param params     */    private void leaveStaffList(Map<String, String> params) {        Call<LeaveStaffListResult> call = getSpaService().getLeaveStaffList(params.get(RequestConstant.KEY_PAGE_INDEX),                params.get(RequestConstant.KEY_ROWS_COUNT));        call.enqueue(new TokenCheckedCallback<LeaveStaffListResult>() {            @Override            protected void postResult(LeaveStaffListResult result) {                RxBus.getInstance().post(result);            }        });    }}