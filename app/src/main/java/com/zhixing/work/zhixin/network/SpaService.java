package com.zhixing.work.zhixin.network;import com.zhixing.work.zhixin.bean.AuthenticateBody;import com.zhixing.work.zhixin.bean.CertificationBody;import com.zhixing.work.zhixin.bean.EducationBody;import com.zhixing.work.zhixin.bean.JobCertificateDetailBean;import com.zhixing.work.zhixin.bean.JobEducationDetailBean;import com.zhixing.work.zhixin.bean.JobWorkDetailBean;import com.zhixing.work.zhixin.bean.StaffJobAdvanceBean;import com.zhixing.work.zhixin.bean.StaffJobBaseCardBean;import com.zhixing.work.zhixin.bean.UpDateInfoBody;import com.zhixing.work.zhixin.network.response.AddCompanyHistoryEventResult;import com.zhixing.work.zhixin.network.response.AddDepartmentResult;import com.zhixing.work.zhixin.network.response.AllDepartmentMemberResult;import com.zhixing.work.zhixin.network.response.AttendanceRecordMonthResult;import com.zhixing.work.zhixin.network.response.AttendanceResult;import com.zhixing.work.zhixin.network.response.AttendanceRuleResult;import com.zhixing.work.zhixin.network.response.AuditMemberResult;import com.zhixing.work.zhixin.network.response.AuthenticateListResult;import com.zhixing.work.zhixin.network.response.CertificateWorkListResult;import com.zhixing.work.zhixin.network.response.CheckStaffRuleResult;import com.zhixing.work.zhixin.network.response.ChildDepartmentResult;import com.zhixing.work.zhixin.network.response.CompanyCardInfoResult;import com.zhixing.work.zhixin.network.response.CompanyCertificationStatusResult;import com.zhixing.work.zhixin.network.response.CompanyManagerListResult;import com.zhixing.work.zhixin.network.response.CreateAttendanceRuleResult;import com.zhixing.work.zhixin.network.response.DeleteAttendanceRuleResult;import com.zhixing.work.zhixin.network.response.DeleteDepartmentResult;import com.zhixing.work.zhixin.network.response.DepartmentInviteResult;import com.zhixing.work.zhixin.network.response.DepartmentListResult;import com.zhixing.work.zhixin.network.response.DepartmentMemberInfoResult;import com.zhixing.work.zhixin.network.response.DepartmentSettingInfoResult;import com.zhixing.work.zhixin.network.response.EditAttendanceMemberResult;import com.zhixing.work.zhixin.network.response.EditBasicInfoResult;import com.zhixing.work.zhixin.network.response.EditCompanyHistoryEventResult;import com.zhixing.work.zhixin.network.response.EditJobAdvancedResult;import com.zhixing.work.zhixin.network.response.EditJobBasicResult;import com.zhixing.work.zhixin.network.response.EditSeniorInfoResult;import com.zhixing.work.zhixin.network.response.EvaluateResult;import com.zhixing.work.zhixin.network.response.ExpectedJobResult;import com.zhixing.work.zhixin.network.response.HandlerAuditResult;import com.zhixing.work.zhixin.network.response.JobCardBasicInfoResult;import com.zhixing.work.zhixin.network.response.JobCardSeniorInfoResult;import com.zhixing.work.zhixin.network.response.JobCertificateDetailResult;import com.zhixing.work.zhixin.network.response.JobEducationDetailResult;import com.zhixing.work.zhixin.network.response.JobEducationListResult;import com.zhixing.work.zhixin.network.response.JobWorkDetailResult;import com.zhixing.work.zhixin.network.response.JobWorkListResult;import com.zhixing.work.zhixin.network.response.JoinDepartmentDetailResult;import com.zhixing.work.zhixin.network.response.JudgeTelephoneUsableResult;import com.zhixing.work.zhixin.network.response.LeaveMemberResult;import com.zhixing.work.zhixin.network.response.LeaveStaffListResult;import com.zhixing.work.zhixin.network.response.LoginResult;import com.zhixing.work.zhixin.network.response.NewJoinMemberResult;import com.zhixing.work.zhixin.network.response.PersonalCardBasicInfoResult;import com.zhixing.work.zhixin.network.response.PersonalCardInfoResult;import com.zhixing.work.zhixin.network.response.PersonalJobCardInfoResult;import com.zhixing.work.zhixin.network.response.RegisterResult;import com.zhixing.work.zhixin.network.response.SettingRoleResult;import com.zhixing.work.zhixin.network.response.SmsCodeResult;import com.zhixing.work.zhixin.network.response.StaffAttendanceRecordResult;import com.zhixing.work.zhixin.network.response.StaffJobAdvancedResult;import com.zhixing.work.zhixin.network.response.StaffJobBaseCardResult;import com.zhixing.work.zhixin.network.response.StatisticsDailyDetailResult;import com.zhixing.work.zhixin.network.response.StatisticsDailyResult;import com.zhixing.work.zhixin.network.response.StatisticsMonthDetailResult;import com.zhixing.work.zhixin.network.response.StatisticsMonthResult;import com.zhixing.work.zhixin.network.response.StsTokenResult;import com.zhixing.work.zhixin.network.response.SubmitAuthenticateResult;import com.zhixing.work.zhixin.network.response.UpdateChildDepartmentResult;import com.zhixing.work.zhixin.network.response.UpdateDepartmentResult;import com.zhixing.work.zhixin.network.response.UpdateJobResult;import com.zhixing.work.zhixin.network.response.UpdatePasswordResult;import com.zhixing.work.zhixin.network.response.UploadCompanyAvatarResult;import com.zhixing.work.zhixin.network.response.UploadPersonalAvatarResult;import com.zhixing.work.zhixin.network.response.WifiListResult;import com.zhixing.work.zhixin.requestbody.AttendanceRuleBody;import com.zhixing.work.zhixin.requestbody.AvatarBody;import com.zhixing.work.zhixin.requestbody.CompanyAvatarBody;import com.zhixing.work.zhixin.requestbody.DepartmentBody;import com.zhixing.work.zhixin.requestbody.EditCompanyHistoryEventBody;import com.zhixing.work.zhixin.requestbody.ExpectedJobBodyBean;import com.zhixing.work.zhixin.requestbody.StaffJobBasicBody;import com.zhixing.work.zhixin.requestbody.StaffJobSeniorBody;import retrofit2.Call;import retrofit2.http.Body;import retrofit2.http.DELETE;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.GET;import retrofit2.http.PATCH;import retrofit2.http.POST;import retrofit2.http.PUT;import retrofit2.http.Query;/** * */public interface SpaService {    @GET(RequestConstant.GET_OSS)    Call<StsTokenResult> getStsToken();    @GET(RequestConstant.AUTHENTICATES)    Call<AuthenticateListResult> getAuthenticates();    @PUT(RequestConstant.AUTHENTICATES)    Call<SubmitAuthenticateResult> submitAuthenticate(@Body AuthenticateBody body);    @PUT(RequestConstant.AUTHENTICATES)    Call<SubmitAuthenticateResult> submitEducationAuthenticate(@Body EducationBody body);    @PUT(RequestConstant.AUTHENTICATES)    Call<SubmitAuthenticateResult> submitCertificationAuthenticate(@Body CertificationBody body);    @GET(RequestConstant.GET_EVALUATE_INFO)    Call<EvaluateResult> evaluateResult(@Query(RequestConstant.KEY_FRONT_OR_BACK) String id,                                        @Query(RequestConstant.KEY_OPT) String opt);    @PUT(RequestConstant.RESUME_EXPECT_JOB)    Call<ExpectedJobResult> updateExpectedJob(@Query(RequestConstant.KEY_RESUME_ID) String resumeId,                                              @Body ExpectedJobBodyBean[] body);    @GET(RequestConstant.GET_EVALUATE_INFO)    Call<PersonalCardBasicInfoResult> getCardBasicInfo(@Query(RequestConstant.KEY_FRONT_OR_BACK) String id,                                                       @Query(RequestConstant.KEY_OPT) String opt);    @POST(RequestConstant.GO_LOGIN)    @FormUrlEncoded    Call<LoginResult> doLogin(@Field(RequestConstant.KEY_PHONE_NUMBER) String PhoneNum,                              @Field(RequestConstant.KEY_PASSWORD) String PassWord,                              @Field(RequestConstant.KEY_USER_ROLE_ENUM) String UserRoleEnum);    @GET(RequestConstant.GET_REGISTER_CODE)    Call<SmsCodeResult> getVerificationCode(@Query(RequestConstant.KEY_PHONE_NUMBER) String PhoneNum,                                            @Query(RequestConstant.KEY_USER_ROLE_ENUM) String UserRoleEnum,                                            @Query(RequestConstant.KEY_SMS_CODE_TYPE_ENUM) String SmsCodeTypeEnum);    @PATCH(RequestConstant.UPDATE_PASSWORD)    Call<UpdatePasswordResult> upDateUserPassword(@Body UpDateInfoBody body);    @POST(RequestConstant.GO_REGISTER)    @FormUrlEncoded    Call<RegisterResult> userRegister(@Field(RequestConstant.KEY_PHONE_NUMBER) String PhoneNum,                                      @Field(RequestConstant.KEY_PASSWORD) String PassWord,                                      @Field(RequestConstant.KEY_ROLE) String Role,                                      @Field(RequestConstant.KEY_VERIFY_CODE) String VerifyCode);    @GET(RequestConstant.GO_REGISTER)    Call<JudgeTelephoneUsableResult> judgeTelephoneUsable(@Query(RequestConstant.KEY_PHONE_NUMBER) String PhoneNum,                                                          @Query(RequestConstant.KEY_ROLE) String Role);    @GET(RequestConstant.COMPANY_CERTIFICATION_STATUS)    Call<CompanyCertificationStatusResult> getCompanyCertificationStatus();    @GET(RequestConstant.DEPARTMENT_MEMBER)    Call<AllDepartmentMemberResult> getAllDepartmentMember();    @DELETE(RequestConstant.DEPARTMENT)    Call<DeleteDepartmentResult> deleteDepartment(@Query(RequestConstant.KEY_DEPARTMENT_ID) String departmentId);    @GET(RequestConstant.INVITE)    Call<DepartmentInviteResult> departmentInvite(@Query(RequestConstant.KEY_DEPARTMENT_ID) String departmentId);    @PATCH(RequestConstant.DEPARTMENT)    Call<UpdateDepartmentResult> updateDepartment(@Query(RequestConstant.KEY_COMPANY_ID) String companyId);    @GET(RequestConstant.DEPARTMENT)    Call<DepartmentListResult> getDepartmentList();    @GET(RequestConstant.DEPARTMENT_CHILD)    Call<ChildDepartmentResult> getChildDepartment(@Query(RequestConstant.KEY_DEPARTMENT_ID) String departmentId);    @GET(RequestConstant.STAFF)    Call<DepartmentMemberInfoResult> getDepartmentMemberInfo(@Query(RequestConstant.KEY_DEPARTMENT_ID) String departmentId);    @POST(RequestConstant.DEPARTMENT)    @FormUrlEncoded    Call<AddDepartmentResult> addDepartment(@Field(RequestConstant.KEY_PARENT_ID) String ParentId,                                            @Field(RequestConstant.KEY_NAME) String name);    @PUT(RequestConstant.DEPARTMENT)    Call<UpdateChildDepartmentResult> updateChildDepartment(@Body DepartmentBody body);    @GET(RequestConstant.GET_DEPARTMENT_SETTING_INFO)    Call<DepartmentSettingInfoResult> getDepartmentSettingInfo(@Query(RequestConstant.KEY_DEPARTMENT_ID) String departmentId);    @GET(RequestConstant.GET_CARD_INFO)    Call<PersonalCardInfoResult> getPersonalCardInfo(@Query(RequestConstant.KEY_FRONT_OR_BACK) String frontOrBack);    @GET(RequestConstant.COMPANY_CARD)    Call<CompanyCardInfoResult> getCompanyCardInfo();    @PATCH(RequestConstant.AVATAR)    Call<UploadPersonalAvatarResult> uploadPersonalAvatar(@Body AvatarBody body);    @PATCH(RequestConstant.UPDATE_COMPANY_AVATAR)    Call<UploadCompanyAvatarResult> uploadCompanyAvatar(@Body CompanyAvatarBody body);    @POST(RequestConstant.COMPANY_HISTORY)    @FormUrlEncoded    Call<AddCompanyHistoryEventResult> addCompanyHistoryEvent(@Field(RequestConstant.KEY_NAME) String Name,                                                              @Field(RequestConstant.KEY_DATE_DATE) String Date,                                                              @Field(RequestConstant.KEY_INTRO) String Intro,                                                              @Field(RequestConstant.KEY_IMAGE) String Image);    @PUT(RequestConstant.COMPANY_HISTORY)    Call<EditCompanyHistoryEventResult> editCompanyHistoryEvent(@Body EditCompanyHistoryEventBody body);    @GET(RequestConstant.GET_USER_ATTENDANCE_RECORD)    Call<StaffAttendanceRecordResult> staffAttendanceRecord(@Query(RequestConstant.KEY_STAFF_ID) String staffId,                                                            @Query(RequestConstant.KEY_START_DATE) String startDate,                                                            @Query(RequestConstant.KEY_END_DATE) String endDate);    @GET(RequestConstant.GET_USER_ATTENDANCE_WIFI_LIST)    Call<WifiListResult> getWifiList();    @FormUrlEncoded    @POST(RequestConstant.STAFF_ATTENDANCE)    Call<AttendanceResult> staffAttendance(@Field(RequestConstant.KEY_BSS_ID) String bssId,                                           @Field(RequestConstant.KEY_WIFI_NAME) String wifiName,                                           @Field(RequestConstant.KEY_CLIENT_CODE) String code);    @GET(RequestConstant.GET_ATTENDANCE_RECORD_STATISTICS_DAILY)    Call<StatisticsDailyResult> statisticsDaily(@Query(RequestConstant.KEY_DATE_DATE) String date);    @GET(RequestConstant.GET_ATTENDANCE_STATISTICS_DAILY_DETAIL)    Call<StatisticsDailyDetailResult> statisticsDailyDetail(@Query(RequestConstant.KEY_DATE_DATE) String date,                                                            @Query(RequestConstant.KEY_CLOCK_STATUS) String clockStatus,                                                            @Query(RequestConstant.KEY_PAGE_INDEX) String pageIndex,                                                            @Query(RequestConstant.KEY_ROWS_COUNT) String rowsCount);    @GET(RequestConstant.GET_ATTENDANCE_RECORD_STATISTICS_MONTH)    Call<StatisticsMonthResult> statisticsMonth(@Query(RequestConstant.KEY_DATE_DATE) String date);    @GET(RequestConstant.GET_ATTENDANCE_STATISTICS_MONTH_DETAIL)    Call<StatisticsMonthDetailResult> statisticsMonthDetail(@Query(RequestConstant.KEY_DATE_DATE) String date,                                                            @Query(RequestConstant.KEY_CLOCK_STATUS) String clockStatus,                                                            @Query(RequestConstant.KEY_PAGE_INDEX) String pageIndex,                                                            @Query(RequestConstant.KEY_ROWS_COUNT) String rowsCount);    @GET(RequestConstant.GET_STAFF_ATTENDANCE_RECORD_MONTH)    Call<AttendanceRecordMonthResult> personalRecordMonth(@Query(RequestConstant.KEY_STAFF_ID) String staffId,                                                          @Query(RequestConstant.KEY_DATE_DATE) String date);    @POST(RequestConstant.CREATE_ATTENDANCE_RULE)    Call<CreateAttendanceRuleResult> createAttendanceRule(@Body AttendanceRuleBody body);    @PUT(RequestConstant.EDIT_ATTENDANCE_RULE)    Call<CreateAttendanceRuleResult> editAttendanceRule(@Body AttendanceRuleBody body);    @GET(RequestConstant.GET_ATTENDANCE_RULE)    Call<AttendanceRuleResult> getAttendanceRule();    @DELETE(RequestConstant.DELETE_ATTENDANCE_RULE)    Call<DeleteAttendanceRuleResult> deleteAttendanceRule(@Query(RequestConstant.KEY_ID) String id);    @PUT(RequestConstant.EDIT_ATTENDANCE_MEMBER)    Call<EditAttendanceMemberResult> editAttendanceMember(@Query(RequestConstant.KEY_ID) String id,                                                          @Body Integer[] body);    @GET(RequestConstant.CHECK_STAFF_ATTENDANCE_RULE)    Call<CheckStaffRuleResult> checkStaffRule(@Query(RequestConstant.KEY_ATTENDANCE_RULE_ID) String attendanceRuleId,                                              @Query(RequestConstant.KEY_STAFF_IDS) Integer[] integers);    @GET(RequestConstant.GET_JOIN_DEPARTMENT_MEMBER)    Call<NewJoinMemberResult> getJoinDepartmentTotal();    @GET(RequestConstant.GET_JOIN_DEPARTMENT_LIST)    Call<AuditMemberResult> getJoinDepartmentList(@Query(RequestConstant.KEY_AUDIT_STATUS) String auditStatus);    @GET(RequestConstant.GET_JOIN_DEPARTMENT_DETAIL)    Call<JoinDepartmentDetailResult> getJoinDepartmentDetail(@Query(RequestConstant.KEY_ID) String id);    @FormUrlEncoded    @PUT(RequestConstant.HANDLER_JOIN_DEPARTMENT)    Call<HandlerAuditResult> handlerAudit(@Field(RequestConstant.KEY_ID) String id,                                          @Field(RequestConstant.KEY_PASSED) String passed,                                          @Field(RequestConstant.KEY_ATTENDANCE_RULE_ID) String attendanceRuleId);    @GET(RequestConstant.GET_COMPANY_STAFF_CARD)    Call<PersonalJobCardInfoResult> getPersonalJobCard(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @GET(RequestConstant.GET_COMPANY_STAFF_JOB_BASE)    Call<JobCardBasicInfoResult> getPersonalJobCardBasicInfo(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @GET(RequestConstant.GET_COMPANYSTAFF_JOB_ADVANCED)    Call<JobCardSeniorInfoResult> getPersonalJobCardSeniorInfo(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @PATCH(RequestConstant.EDIT_COMPANY_STAFF_JOB_BASE)    Call<EditBasicInfoResult> editStaffBasicInfo(@Body StaffJobBasicBody body);    //@FormUrlEncoded    @PATCH(RequestConstant.EIDT_COMPANYSTAFF_JOB_ADVANCED)    Call<EditSeniorInfoResult> editStaffSeniorInfo(@Body StaffJobSeniorBody body);    @GET(RequestConstant.GET_COMPANY_STAFF_PERSON_BASE)    Call<StaffJobBaseCardResult> getStaffJobBaseCard(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @GET(RequestConstant.GET_COMPANY_STAFF_PERSON_ADVANCED)    Call<StaffJobAdvancedResult> getStaffJobAdvance(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    //    @PATCH(RequestConstant.EDIT_COMPANYSTAFF_PERSON_BASE)    Call<EditJobBasicResult> editStaffJobBasicInfo(@Body StaffJobBaseCardBean body);    @PATCH(RequestConstant.EDIT_COMPANY_STAFF_PERSON_ADVANCED)    Call<EditJobAdvancedResult> editStaffJobAdvancedInfo(@Body StaffJobAdvanceBean body);    @GET(RequestConstant.GET_STAFF_WORK_LIST)    Call<JobWorkListResult> staffWorkList(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @DELETE(RequestConstant.DELETE_STAFF_WORK)    Call<UpdateJobResult> deleteStaffWork(@Query(RequestConstant.KEY_ID) String id,                                          @Query(RequestConstant.KEY_STAFF_ID) String staffId);    @GET(RequestConstant.GET_STAFF_WORK_DETAIL)    Call<JobWorkDetailResult> getJobWorkDetail(@Query(RequestConstant.KEY_STAFF_ID) String StaffId, @Query(RequestConstant.KEY_ID) String id);    @FormUrlEncoded    @POST(RequestConstant.ADD_STAFF_WORK)    Call<UpdateJobResult> addStaffWork(@Field(RequestConstant.KEY_STAFF_ID) String staffId,                                       @Field(RequestConstant.KEY_COMPANY_NAME) String companyName,                                       @Field(RequestConstant.KEY_START_DATE_START) String StartDate,                                       @Field(RequestConstant.KEY_END_DATE_END) String EndDate,                                       @Field(RequestConstant.KEY_POST_OF_DUTY) String PostDuty,                                       @Field(RequestConstant.KEY_DEPARTMENT) String Department,                                       @Field(RequestConstant.KEY_JOB_CONTENT) String JobContent);    @PUT(RequestConstant.EDIT_STAFF_WORK)    Call<UpdateJobResult> editStaffWork(@Body JobWorkDetailBean body);    @GET(RequestConstant.GET_STAFF_EDUCATION_LIST)    Call<JobEducationListResult> staffEducationList(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @DELETE(RequestConstant.DELETE_STAFF_EDUCATION)    Call<UpdateJobResult> deleteStaffEducation(@Query(RequestConstant.KEY_ID) String id,                                               @Query(RequestConstant.KEY_STAFF_ID) String staffId);    //getJobEducationDetail    @GET(RequestConstant.GET_STAFF_EDUCATION_DETAIL)    Call<JobEducationDetailResult> getJobEducationDetail(@Query(RequestConstant.KEY_STAFF_ID) String StaffId, @Query(RequestConstant.KEY_ID) String id);    @FormUrlEncoded    @POST(RequestConstant.ADD_STAFF_EDUCATION)    Call<UpdateJobResult> addStaffEducation(@Field(RequestConstant.KEY_STAFF_ID) String staffId,                                            @Field(RequestConstant.KEY_EDUCATION) String Education,                                            @Field(RequestConstant.KEY_SCHOOL) String School,                                            @Field(RequestConstant.KEY_START_DATE) String StartDate,                                            @Field(RequestConstant.KEY_END_DATE_END) String EndDate,                                            @Field(RequestConstant.KEY_MAJOR) String Major,                                            @Field(RequestConstant.KEY_EXPERIENCE) String Experience);    @PUT(RequestConstant.EDIT_STAFF_EDUCATION)    Call<UpdateJobResult> editStaffEducation(@Body JobEducationDetailBean body);    @GET(RequestConstant.GET_STAFF_CERTIFICATE_LIST)    Call<CertificateWorkListResult> staffCertificateList(@Query(RequestConstant.KEY_STAFF_ID) String staffId);    @DELETE(RequestConstant.DELETE_STAFF_CERTIFICATE)    Call<UpdateJobResult> deleteStaffCertificate(@Query(RequestConstant.KEY_ID) String id,                                                 @Query(RequestConstant.KEY_STAFF_ID) String staffId);    @GET(RequestConstant.GET_STAFF_CERTIFICATE_DETAIL)    Call<JobCertificateDetailResult> getJobCertificateDetail(@Query(RequestConstant.KEY_STAFF_ID) String StaffId,                                                             @Query(RequestConstant.KEY_ID) String id);    @FormUrlEncoded    @POST(RequestConstant.ADD_STAFF_CERTIFICATE)    Call<UpdateJobResult> addStaffCertificate(@Field(RequestConstant.KEY_STAFF_ID) String staffId,                                              @Field(RequestConstant.KEY_CERTIFICATE_TITLE) String certificateTitle,                                              @Field(RequestConstant.KEY_GRADUATION_DATE) String graduationDate,                                              @Field(RequestConstant.KEY_GRADE) String Grade);    @PUT(RequestConstant.EDIT_STAFF_CERTIFICATE)    Call<UpdateJobResult> editStaffCertificate(@Body JobCertificateDetailBean body);    @GET(RequestConstant.GET_COMPANY_STAFF_DIMISSION_COUNT)    Call<LeaveMemberResult> leaveMemberCount();    @GET(RequestConstant.GET_COMPANY_STAFF_DIMISSION_LIST)    Call<LeaveStaffListResult> getLeaveStaffList(@Query(RequestConstant.KEY_PAGE_INDEX) String pageIndex,                                                 @Query(RequestConstant.KEY_ROWS_COUNT) String rowsCount);    @GET(RequestConstant.GET_COMPANY_MANAGER_LIST)    Call<CompanyManagerListResult> getCompanyManagerList(@Query(RequestConstant.KEY_STAFF_ROLE) String staffRole);    @PATCH(RequestConstant.SET_USER_ROLE)    Call<SettingRoleResult> setUserRole(@Query(RequestConstant.KEY_STAFF_ID) String staffId,                                        @Query(RequestConstant.KEY_STAFF_ROLE) String staffRole);}